---
- name: Include OS-specific variables (RedHat).
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution != "Fedora"

- name: Include OS-specific variables (Fedora).
  ansible.builtin.include_vars: "{{ ansible_distribution }}.yml"
  when: ansible_distribution == "Fedora"

- name: Include OS-specific variables (Debian).
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"
  when: ansible_os_family == "Debian"

- name: Define git_install_from_source_dependencies.
  ansible.builtin.set_fact:
    git_install_from_source_dependencies: "{{ __git_install_from_source_dependencies | list }}"
  when: git_install_from_source_dependencies is not defined

- name: Ensure git's dependencies are installed.
  ansible.builtin.package:
    name: "{{ git_install_from_source_dependencies }}"
    state: present

- name: Get installed version.
  ansible.builtin.command: git --version # noqa command-instead-of-module
  changed_when: false
  failed_when: false
  check_mode: false
  register: git_installed_version

- name: Force git install if the version numbers do not match.
  ansible.builtin.set_fact:
    git_reinstall_from_source: true
  when:
    - git_install_from_source_force_update | bool
    - (git_installed_version.rc == 0) and (git_installed_version.stdout | regex_replace("^.*?([0-9\.]+)$", "\\1") is version(git_version, operator="!="))

- name: Download git.
  ansible.builtin.get_url:
    url: "https://www.kernel.org/pub/software/scm/git/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}/git-{{ git_version }}.tar.gz"
    mode: '0644'
  when: (git_installed_version.rc != 0) or (git_reinstall_from_source | bool)

- name: Expand git archive.
  ansible.builtin.unarchive:
    src: "{{ workspace }}/git-{{ git_version }}.tar.gz"
    dest: "{{ workspace }}"
    creates: "{{ workspace }}/git-{{ git_version }}/README"
    remote_src: true
    mode: '0755'
  when: (git_installed_version.rc != 0) or (git_reinstall_from_source | bool)

- name: Build git.
  ansible.builtin.command: >
    make prefix={{ git_install_path }} {{ item }}
    chdir={{ workspace }}/git-{{ git_version }}
  with_items:
    - all
    - install
  when: (git_installed_version.rc != 0) or (git_reinstall_from_source | bool)
  become: true
  register: git_build_result
  changed_when: "'Nothing to be done for' not in git_build_result.stdout_lines"
